@{
    ViewData["Title"] = "Sulusepken";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .pdf-controls {
        text-align: center;
        margin-bottom: 20px;
    }

        .pdf-controls button {
            background-color: transparent;
            border: 1px solid #fff;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
            margin: 0 5px;
        }

            .pdf-controls button:hover {
                background-color: #fff;
                color: #000;
            }

    #pdf-container {
        width: 100%;
        max-width: 900px;
        margin: 100px auto; /* Sayfanın ortasında ve biraz aşağıda olacak */
    }

    canvas {
        display: block;
        margin: 0 auto; /* Canvas'ı ortala */
        max-width: 50%; /* Canvas'ın maksimum genişliği */
        border: 1px solid black; /* Çerçeve kenarları */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* Gölgelendirme */
    }

    
</style>

<body class="bg-black">
    <div id="pdf-container" class="shadow-sm"></div>
    <div class="pdf-controls">
        <button id="prev-page">Previous Page</button>
        <button id="next-page">Next Page</button>
        <span>Page: <span id="page-num"></span> / <span id="page-count"></span></span>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>

    <script>
        const url = '/images/Sulusepken/Sulusepken.pdf';
        let pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 1.0, // Örnek olarak 1.0 (orijinal boyut)
            canvas = document.createElement('canvas'),
            ctx = canvas.getContext('2d');

        document.getElementById('pdf-container').appendChild(canvas);

        function renderPage(num) {
            pageRendering = true;
            pdfDoc.getPage(num).then(page => {
                const viewport = page.getViewport({ scale: scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };

                const renderTask = page.render(renderContext);

                renderTask.promise.then(() => {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });

            document.getElementById('page-num').textContent = num;
        }

        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }

        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }

        pdfjsLib.getDocument(url).promise.then(pdfDoc_ => {
            pdfDoc = pdfDoc_;
            document.getElementById('page-count').textContent = pdfDoc.numPages;
            renderPage(pageNum);
        });

        document.getElementById('prev-page').addEventListener('click', onPrevPage);
        document.getElementById('next-page').addEventListener('click', onNextPage);
    </script>
</body>
